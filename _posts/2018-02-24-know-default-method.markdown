---
layout: post
title:  默认方法读书笔记
date:   2018-02-24 16:35:44 +0800
categories: java8
---
### 什么是默认方法
我们知道在java7之前，接口中只能声明方法，而不能提供方法的实现，方法的实现应该在接口的
实现类，或实现了该接口的抽象类中提供。而在java8之后，我们在接口中通过`default`关键字，
可以为接口方法提供方法体，即声明并且实现了一个接口方法，而这个方法则称之为默认方法。例如
我们之所以能将集合通过`stream`方法转换为流，是因为在`Collection`接口中，提供了`stream`
默认方法的实现。
```
default Stream<E> stream() {
    return StreamSupport.stream(spliterator(), false);
}
```
由于对接口增加新的抽象方法会导致接口实现类同样需要增加相应方法的实现，因此，当类库设计者
为接口添加新的方法后，会造成接口的使用者无法平滑兼容。而java8对库接口做了大量更新，比如
`ArrayList`增加了`stream`方法，那么是否对应的接口实现类也需要做大量改动，实现对应的
新增方法吗？我们注意到`ArrayList`并没有实现该方法，其父类`AbstractList`以及最高级
抽象类`AbstractCollection`均没有实现该方法，`stream`方法是通过`AbstractCollection`
实现的接口`Collection`提供的默认实现，也就是说在接口实现类无需修改的情况下，实现类
自动继承了接口的默认方法，实现了类库的平滑升级。
### 接口支持静态方法
java8除了引入默认方法，还允许我们在接口中声明静态方法。以前常用的模式是我们会定义接口
以及提供对应的工具类，比如提供`Collection`接口然后提供`Collections`工具类。而工具类
中的方法大多是与接口实例协作的静态方法，而现在接口中允许定义和实现静态方法后，我们可以
将这部分静态方法转移到接口内部，因此工具类也就没有了存在的必要。
### 不同类型的兼容性
变更导致对java程序的影响大体可以分为如下三种类型的兼容性。
1. 二进制级别的兼容性。对于二进制级别的兼容性来说，即使二进制文件发生了变动，但之前建立
的链接依然有效，存量接口依然可以调用。如我们为接口增加了新的方法而不改变实现类，此时
接口的
2. 代码级别的兼容性。
3. 方法级别的兼容性。
### java8中的接口与抽象类

